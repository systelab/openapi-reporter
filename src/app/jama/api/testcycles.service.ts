/**
 * Jama REST API
 * This is the documentation for the Jama REST API.
 *
 * OpenAPI spec version: latest
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';

import { Observable } from 'rxjs';
import '../rxjs-operators';

import { AbstractRestResponse } from '../model/abstractRestResponse';
import { RequestPatchOperation } from '../model/requestPatchOperation';
import { RequestTestCycle } from '../model/requestTestCycle';
import { TestCycleDataWrapper } from '../model/testCycleDataWrapper';
import { TestCycleTestGroupDataWrapper } from '../model/testCycleTestGroupDataWrapper';
import { TestRunDataListWrapper } from '../model/testRunDataListWrapper';
import { VersionDataListWrapper } from '../model/versionDataListWrapper';
import { VersionDataWrapper } from '../model/versionDataWrapper';
import { VersionedTestCycleDataWrapper } from '../model/versionedTestCycleDataWrapper';

import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class TestcyclesService {

	protected basePath = 'https://jama.systelab.net/contour/rest/latest';
	public defaultHeaders = new HttpHeaders();
	public configuration = new Configuration();

	constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
		if (basePath) {
			this.basePath = basePath;
		}
		if (configuration) {
			this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
		}
	}

	/**
	 * @param consumes string[] mime-types
	 * @return true: consumes contains 'multipart/form-data', false: otherwise
	 */
	private canConsumeForm(consumes: string[]): boolean {
		const form = 'multipart/form-data';
		for (let consume of consumes) {
			if (form === consume) {
				return true;
			}
		}
		return false;
	}

	public isJsonMime(mime: string): boolean {
		const jsonMime: RegExp = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
		return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
	}

	/**
	 * Delete the test cycle with the specified ID, including the test runs in the test cycle
	 *
	 * @param testCycleId
	 */
	public deleteTestCycle(testCycleId: number): Observable<AbstractRestResponse> {
		if (testCycleId === null || testCycleId === undefined) {
			throw new Error('Required parameter testCycleId was null or undefined when calling deleteTestCycle.');
		}

		let headers = this.defaultHeaders;

		// authentication (basic) required
		if (this.configuration.username || this.configuration.password) {
			headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
		}

		// authentication (oauth2) required
		if (this.configuration.accessToken) {
			let accessToken = typeof this.configuration.accessToken === 'function'
				? this.configuration.accessToken()
				: this.configuration.accessToken;
			headers = headers.set('Authorization', 'Bearer ' + accessToken);
		}

		return this.httpClient.delete<any>(`${this.basePath}/testcycles/${encodeURIComponent(String(testCycleId))}`, {
			headers:         headers,
			withCredentials: this.configuration.withCredentials,
		});
	}

	/**
	 * Get the test cycle with the specified ID
	 *
	 * @param testCycleId
	 * @param include Links to include as full objects in the linked map
	 */
	public getTestCycle(testCycleId: number, include?: Array<string>): Observable<TestCycleDataWrapper> {
		if (testCycleId === null || testCycleId === undefined) {
			throw new Error('Required parameter testCycleId was null or undefined when calling getTestCycle.');
		}

		let queryParameters = new HttpParams();
		if (include) {
			include.forEach((element) => {
				queryParameters = queryParameters.append('include', <any>element);
			})
		}

		let headers = this.defaultHeaders;

		// authentication (basic) required
		if (this.configuration.username || this.configuration.password) {
			headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
		}

		// authentication (oauth2) required
		if (this.configuration.accessToken) {
			let accessToken = typeof this.configuration.accessToken === 'function'
				? this.configuration.accessToken()
				: this.configuration.accessToken;
			headers = headers.set('Authorization', 'Bearer ' + accessToken);
		}

		return this.httpClient.get<any>(`${this.basePath}/testcycles/${encodeURIComponent(String(testCycleId))}`, {
			params:          queryParameters,
			headers:         headers,
			withCredentials: this.configuration.withCredentials,
		});
	}

	/**
	 * Get the test cycle test group for the test cycle with the specified ID
	 *
	 * @param testGroupId Get the test group with the specified ID
	 * @param testCycleId
	 * @param include Links to include as full objects in the linked map
	 */
	public getTestCycleTestGroup(testGroupId: number, testCycleId: number, include?: Array<string>): Observable<TestCycleTestGroupDataWrapper> {
		if (testGroupId === null || testGroupId === undefined) {
			throw new Error('Required parameter testGroupId was null or undefined when calling getTestCycleTestGroup.');
		}
		if (testCycleId === null || testCycleId === undefined) {
			throw new Error('Required parameter testCycleId was null or undefined when calling getTestCycleTestGroup.');
		}

		let queryParameters = new HttpParams();
		if (include) {
			include.forEach((element) => {
				queryParameters = queryParameters.append('include', <any>element);
			})
		}

		let headers = this.defaultHeaders;

		// authentication (basic) required
		if (this.configuration.username || this.configuration.password) {
			headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
		}

		// authentication (oauth2) required
		if (this.configuration.accessToken) {
			let accessToken = typeof this.configuration.accessToken === 'function'
				? this.configuration.accessToken()
				: this.configuration.accessToken;
			headers = headers.set('Authorization', 'Bearer ' + accessToken);
		}

		return this.httpClient.get<any>(`${this.basePath}/testcycles/${encodeURIComponent(String(testCycleId))}/testgroup/${encodeURIComponent(String(testGroupId))}`, {
			params:          queryParameters,
			headers:         headers,
			withCredentials: this.configuration.withCredentials,
		});
	}

	/**
	 * Get all test runs for the test cycle with the specified ID
	 *
	 * @param testCycleId
	 * @param startAt
	 * @param maxResults If not set, this defaults to 20. This cannot be larger than 50
	 * @param include Links to include as full objects in the linked map
	 */
	public getTestRuns(testCycleId: number, startAt?: number, maxResults?: number, include?: Array<string>): Observable<TestRunDataListWrapper> {
		if (testCycleId === null || testCycleId === undefined) {
			throw new Error('Required parameter testCycleId was null or undefined when calling getTestRuns.');
		}

		let queryParameters = new HttpParams();
		if (startAt !== undefined) {
			queryParameters = queryParameters.set('startAt', <any>startAt);
		}
		if (maxResults !== undefined) {
			queryParameters = queryParameters.set('maxResults', <any>maxResults);
		}
		if (include) {
			include.forEach((element) => {
				queryParameters = queryParameters.append('include', <any>element);
			})
		}

		let headers = this.defaultHeaders;

		// authentication (basic) required
		if (this.configuration.username || this.configuration.password) {
			headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
		}

		// authentication (oauth2) required
		if (this.configuration.accessToken) {
			let accessToken = typeof this.configuration.accessToken === 'function'
				? this.configuration.accessToken()
				: this.configuration.accessToken;
			headers = headers.set('Authorization', 'Bearer ' + accessToken);
		}

		return this.httpClient.get<any>(`${this.basePath}/testcycles/${encodeURIComponent(String(testCycleId))}/testruns`, {
			params:          queryParameters,
			headers:         headers,
			withCredentials: this.configuration.withCredentials,
		});
	}

	/**
	 * Get the numbered version for the item with the specified ID
	 *
	 * @param versionNum
	 * @param testCycleId
	 * @param include Links to include as full objects in the linked map
	 */
	public getVersionOnItem3(versionNum: number, testCycleId: number, include?: Array<string>): Observable<VersionDataWrapper> {
		if (versionNum === null || versionNum === undefined) {
			throw new Error('Required parameter versionNum was null or undefined when calling getVersionOnItem3.');
		}
		if (testCycleId === null || testCycleId === undefined) {
			throw new Error('Required parameter testCycleId was null or undefined when calling getVersionOnItem3.');
		}

		let queryParameters = new HttpParams();
		if (include) {
			include.forEach((element) => {
				queryParameters = queryParameters.append('include', <any>element);
			})
		}

		let headers = this.defaultHeaders;

		// authentication (basic) required
		if (this.configuration.username || this.configuration.password) {
			headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
		}

		// authentication (oauth2) required
		if (this.configuration.accessToken) {
			let accessToken = typeof this.configuration.accessToken === 'function'
				? this.configuration.accessToken()
				: this.configuration.accessToken;
			headers = headers.set('Authorization', 'Bearer ' + accessToken);
		}

		return this.httpClient.get<any>(`${this.basePath}/testcycles/${encodeURIComponent(String(testCycleId))}/versions/${encodeURIComponent(String(versionNum))}`, {
			params:          queryParameters,
			headers:         headers,
			withCredentials: this.configuration.withCredentials,
		});
	}

	/**
	 * Get the  snapshot of the test cycle at the specified version
	 *
	 * @param versionNum
	 * @param testCycleId
	 * @param include Links to include as full objects in the linked map
	 */
	public getVersionedItem3(versionNum: number, testCycleId: number, include?: Array<string>): Observable<VersionedTestCycleDataWrapper> {
		if (versionNum === null || versionNum === undefined) {
			throw new Error('Required parameter versionNum was null or undefined when calling getVersionedItem3.');
		}
		if (testCycleId === null || testCycleId === undefined) {
			throw new Error('Required parameter testCycleId was null or undefined when calling getVersionedItem3.');
		}

		let queryParameters = new HttpParams();
		if (include) {
			include.forEach((element) => {
				queryParameters = queryParameters.append('include', <any>element);
			})
		}

		let headers = this.defaultHeaders;

		// authentication (basic) required
		if (this.configuration.username || this.configuration.password) {
			headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
		}

		// authentication (oauth2) required
		if (this.configuration.accessToken) {
			let accessToken = typeof this.configuration.accessToken === 'function'
				? this.configuration.accessToken()
				: this.configuration.accessToken;
			headers = headers.set('Authorization', 'Bearer ' + accessToken);
		}

		return this.httpClient.get<any>(`${this.basePath}/testcycles/${encodeURIComponent(String(testCycleId))}/versions/${encodeURIComponent(String(versionNum))}/versioneditem`, {
			params:          queryParameters,
			headers:         headers,
			withCredentials: this.configuration.withCredentials,
		});
	}

	/**
	 * Get all versions for the item with the specified ID
	 *
	 * @param testCycleId
	 * @param startAt
	 * @param maxResults If not set, this defaults to 20. This cannot be larger than 50
	 * @param include Links to include as full objects in the linked map
	 */
	public getVersionsOnItem3(testCycleId: number, startAt?: number, maxResults?: number, include?: Array<string>): Observable<VersionDataListWrapper> {
		if (testCycleId === null || testCycleId === undefined) {
			throw new Error('Required parameter testCycleId was null or undefined when calling getVersionsOnItem3.');
		}

		let queryParameters = new HttpParams();
		if (startAt !== undefined) {
			queryParameters = queryParameters.set('startAt', <any>startAt);
		}
		if (maxResults !== undefined) {
			queryParameters = queryParameters.set('maxResults', <any>maxResults);
		}
		if (include) {
			include.forEach((element) => {
				queryParameters = queryParameters.append('include', <any>element);
			})
		}

		let headers = this.defaultHeaders;

		// authentication (basic) required
		if (this.configuration.username || this.configuration.password) {
			headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
		}

		// authentication (oauth2) required
		if (this.configuration.accessToken) {
			let accessToken = typeof this.configuration.accessToken === 'function'
				? this.configuration.accessToken()
				: this.configuration.accessToken;
			headers = headers.set('Authorization', 'Bearer ' + accessToken);
		}

		return this.httpClient.get<any>(`${this.basePath}/testcycles/${encodeURIComponent(String(testCycleId))}/versions`, {
			params:          queryParameters,
			headers:         headers,
			withCredentials: this.configuration.withCredentials,
		});
	}

	/**
	 * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle
	 *
	 * @param body
	 * @param testCycleId
	 */
	public patchTestCycle(body: Array<RequestPatchOperation>, testCycleId: number): Observable<AbstractRestResponse> {
		if (body === null || body === undefined) {
			throw new Error('Required parameter body was null or undefined when calling patchTestCycle.');
		}
		if (testCycleId === null || testCycleId === undefined) {
			throw new Error('Required parameter testCycleId was null or undefined when calling patchTestCycle.');
		}

		let headers = this.defaultHeaders;

		// authentication (basic) required
		if (this.configuration.username || this.configuration.password) {
			headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
		}

		// authentication (oauth2) required
		if (this.configuration.accessToken) {
			let accessToken = typeof this.configuration.accessToken === 'function'
				? this.configuration.accessToken()
				: this.configuration.accessToken;
			headers = headers.set('Authorization', 'Bearer ' + accessToken);
		}

		return this.httpClient.patch<any>(`${this.basePath}/testcycles/${encodeURIComponent(String(testCycleId))}`, body, {
			headers:         headers,
			withCredentials: this.configuration.withCredentials,
		});
	}

	/**
	 * Update the test cycle with the specified ID, including regenerating the test runs in the test cycle
	 *
	 * @param body
	 * @param testCycleId
	 */
	public updateTestCycle(body: RequestTestCycle, testCycleId: number): Observable<AbstractRestResponse> {
		if (body === null || body === undefined) {
			throw new Error('Required parameter body was null or undefined when calling updateTestCycle.');
		}
		if (testCycleId === null || testCycleId === undefined) {
			throw new Error('Required parameter testCycleId was null or undefined when calling updateTestCycle.');
		}

		let headers = this.defaultHeaders;

		// authentication (basic) required
		if (this.configuration.username || this.configuration.password) {
			headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
		}

		// authentication (oauth2) required
		if (this.configuration.accessToken) {
			let accessToken = typeof this.configuration.accessToken === 'function'
				? this.configuration.accessToken()
				: this.configuration.accessToken;
			headers = headers.set('Authorization', 'Bearer ' + accessToken);
		}

		return this.httpClient.put<any>(`${this.basePath}/testcycles/${encodeURIComponent(String(testCycleId))}`, body, {
			headers:         headers,
			withCredentials: this.configuration.withCredentials,
		});
	}

}
